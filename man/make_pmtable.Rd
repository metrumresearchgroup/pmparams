% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_pmtable.R
\name{make_pmtable}
\alias{make_pmtable}
\title{Make pmtable parameter table}
\usage{
make_pmtable(.df, .pmtype = "full", .width = 1)
}
\arguments{
\item{.df}{parameter data set output from pmparams::format_param_table or pmparams::format_boot_table.}

\item{.pmtype}{parameter table type. Options include: full (all rows in .df retained in pmtable), fixed (all rows with type = "Struct" or "effect"), structural (all rows with type = "Struct"), covariate (all rows with type = "effect"), random (all rows with greek = "Omega" and type = "Resid"). Defaults to "full".}

\item{.width}{notes width. Defaults to 1.}
}
\description{
Generates specific parameter tables by filtering and using pmtables

This function:
\enumerate{
\item Filters to columns needed for specific parameter tables
\item Panels by "type"
\item Makes "abb", "greek", "desc" blank for "full", "fixed", "structural", "covariate" parameter tables.
Makes "abb" and "greek" blank for "random"
\item Attaches notes
\item Rename "value" to "Estimate" and "shrinkage" to "Shrinkage (\\\%)", if applicable
}

If these pmtable settings do not work for your parameter table, you can overwrite them afterwards using desired pmtables commands.
}
\examples{

#Using output from `format_param_table` (defineOut),
paramEst <- utils::read.csv(system.file("model/nonmem/param_est.csv", package = "pmparams"))
paramKey <-  system.file("model/nonmem/pk-parameter-key-new.yaml", package = "pmparams")
defineOut <- define_param_table(.estimates = paramEst, .key = paramKey, .ci = 95, .zscore = NULL)
data <- format_param_table(.df = defineOut)

#To make random effects table:

make_pmtable(.df = data, .pmtype = "random")
}
