% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_param_table.R
\name{format_param_table}
\alias{format_param_table}
\title{Format parameter table}
\usage{
format_param_table(
  .df,
  .select_cols = c("type", "abb", "greek", "desc", "value", "ci", "shrinkage"),
  .prse = FALSE,
  .digit = getOption("pmparams.dig"),
  .maxex = getOption("pmparams.maxex")
)
}
\arguments{
\item{.df}{parameter estimates output from \code{define_param_table} with modifications ready for formatting}

\item{.select_cols}{columns to select for output. Default selects "type", "abb", "greek", "desc", "value", "ci", "shrinkage". To return all columns, specify "all" for .select_cols}

\item{.prse}{output pRSE. Default is FALSE}

\item{.digit}{set significant digits for output (optional). Default is three digits}

\item{.maxex}{set maxex for computation (optional). Default is NULL}
}
\description{
Format parameter estimate values and output selected columns to be shown in
the parameter table.

There are four main steps of this function:
\enumerate{
\item When necessary, back transform parameters and their CIs, round parameters using pmtables::sig, and combine columns.
\item Format the THETA/OMEGA/SIGMA values to display as greek letters in Latex, with subscript numbers, and where necessary, the transformation applied to that parameter.
\item Determine which panel of the final table the parameter should be displayed in. This is informed by the panel argument you defined in your parameter key. Note that there are a finite number of options included by default (see below) but you can include additional panels as needed.
Panel types include:
}
\itemize{
\item Residual variance
\item Interindividual covariance parameters
\item Interindividual variance parameters
\item Interoccasion variance parameters
\item Covariate effect parameters
\item Structural model parameters
}
\enumerate{
\item Select columns for final tables.
}
}
\examples{

#Using output from `define_param_table` (defineOut),
paramEst <- utils::read.csv(system.file("model/nonmem/param_est.csv", package = "pmparams"))
paramKey <-  system.file("model/nonmem/pk-parameter-key-new.yaml", package = "pmparams")
defineOut <- define_param_table(.estimates = paramEst, .key = paramKey, .ci = 95, .zscore = NULL)

format_param_table(.df = defineOut) \%>\% head()

#To include all columns:

format_param_table(.df = defineOut, .select_cols="all") \%>\% head()
}
